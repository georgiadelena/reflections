How did viewing a diff between two versions of a file help you see the bug that was introduced?

I could see the differences between both versions and check each one of them, till I noticed the typo.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You can see what changes you have made, correct mistakes in new versions and go back to previous releases, if you wish.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

When a version is automatically saved, this could happen when you're in the middle of writing code, which will result in an unfinished version, with errors. On the other hand, there is no risk of forgetting to save and losing your files. When you manually choose to save, you are sure that your work is finished before you do so, but you need to remember to save in logical intervals.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because every version control system is used for different reasons and each serves its purpose. With git, it makes sense to save multiple files that make up a project, so as to have a sodil, updated version of your project.

How can you use the commands git log and git diff to view the history of files?

Using git log, you can see the commit history of the files. Using git diff, you can compare two different versions, to see what was added or deleted from the code.

How might using version control make you more confident to make changes that could break something?

Because you know that you can use checkout to revert to a previous version of your code, that works, anytime you want.

Now that you have your workspace set up, what do you want to try using Git for?

I want to be able to upload my code to gitHub and be able to see updated versions, or work together with other people.